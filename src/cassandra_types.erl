%%
%% Autogenerated by Thrift Compiler (0.9.2)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(cassandra_types).

-include("cassandra_types.hrl").

-export([struct_info/1, struct_info_ext/1]).

struct_info('Column') ->
  {struct, [{1, string},
          {2, string},
          {3, i64},
          {4, i32}]}
;

struct_info('SuperColumn') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'Column'}}}}]}
;

struct_info('CounterColumn') ->
  {struct, [{1, string},
          {2, i64}]}
;

struct_info('CounterSuperColumn') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'CounterColumn'}}}}]}
;

struct_info('ColumnOrSuperColumn') ->
  {struct, [{1, {struct, {'cassandra_types', 'Column'}}},
          {2, {struct, {'cassandra_types', 'SuperColumn'}}},
          {3, {struct, {'cassandra_types', 'CounterColumn'}}},
          {4, {struct, {'cassandra_types', 'CounterSuperColumn'}}}]}
;

struct_info('NotFoundException') ->
  {struct, []}
;

struct_info('InvalidRequestException') ->
  {struct, [{1, string}]}
;

struct_info('UnavailableException') ->
  {struct, []}
;

struct_info('TimedOutException') ->
  {struct, [{1, i32},
          {2, bool},
          {3, bool}]}
;

struct_info('AuthenticationException') ->
  {struct, [{1, string}]}
;

struct_info('AuthorizationException') ->
  {struct, [{1, string}]}
;

struct_info('SchemaDisagreementException') ->
  {struct, []}
;

struct_info('ColumnParent') ->
  {struct, [{3, string},
          {4, string}]}
;

struct_info('ColumnPath') ->
  {struct, [{3, string},
          {4, string},
          {5, string}]}
;

struct_info('SliceRange') ->
  {struct, [{1, string},
          {2, string},
          {3, bool},
          {4, i32}]}
;

struct_info('SlicePredicate') ->
  {struct, [{1, {list, string}},
          {2, {struct, {'cassandra_types', 'SliceRange'}}}]}
;

struct_info('IndexExpression') ->
  {struct, [{1, string},
          {2, i32},
          {3, string}]}
;

struct_info('IndexClause') ->
  {struct, [{1, {list, {struct, {'cassandra_types', 'IndexExpression'}}}},
          {2, string},
          {3, i32}]}
;

struct_info('KeyRange') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {6, {list, {struct, {'cassandra_types', 'IndexExpression'}}}},
          {5, i32}]}
;

struct_info('KeySlice') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}}}]}
;

struct_info('KeyCount') ->
  {struct, [{1, string},
          {2, i32}]}
;

struct_info('Deletion') ->
  {struct, [{1, i64},
          {2, string},
          {3, {struct, {'cassandra_types', 'SlicePredicate'}}}]}
;

struct_info('Mutation') ->
  {struct, [{1, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}},
          {2, {struct, {'cassandra_types', 'Deletion'}}}]}
;

struct_info('EndpointDetails') ->
  {struct, [{1, string},
          {2, string},
          {3, string}]}
;

struct_info('CASResult') ->
  {struct, [{1, bool},
          {2, {list, {struct, {'cassandra_types', 'Column'}}}}]}
;

struct_info('TokenRange') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, string}},
          {4, {list, string}},
          {5, {list, {struct, {'cassandra_types', 'EndpointDetails'}}}}]}
;

struct_info('AuthenticationRequest') ->
  {struct, [{1, {map, string, string}}]}
;

struct_info('ColumnDef') ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, string},
          {5, {map, string, string}}]}
;

struct_info('TriggerDef') ->
  {struct, [{1, string},
          {2, {map, string, string}}]}
;

struct_info('CfDef') ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {5, string},
          {6, string},
          {8, string},
          {12, double},
          {13, {list, {struct, {'cassandra_types', 'ColumnDef'}}}},
          {14, i32},
          {15, string},
          {16, i32},
          {17, i32},
          {18, i32},
          {26, string},
          {28, string},
          {29, string},
          {30, {map, string, string}},
          {32, {map, string, string}},
          {33, double},
          {34, string},
          {37, double},
          {39, i32},
          {40, i32},
          {42, string},
          {43, {list, {struct, {'cassandra_types', 'TriggerDef'}}}},
          {44, string},
          {45, i32},
          {46, i32},
          {9, double},
          {11, double},
          {19, i32},
          {20, i32},
          {21, i32},
          {22, i32},
          {23, double},
          {24, bool},
          {25, double},
          {27, string},
          {31, i32},
          {38, bool},
          {41, i32}]}
;

struct_info('KsDef') ->
  {struct, [{1, string},
          {2, string},
          {3, {map, string, string}},
          {4, i32},
          {5, {list, {struct, {'cassandra_types', 'CfDef'}}}},
          {6, bool}]}
;

struct_info('CqlRow') ->
  {struct, [{1, string},
          {2, {list, {struct, {'cassandra_types', 'Column'}}}}]}
;

struct_info('CqlMetadata') ->
  {struct, [{1, {map, string, string}},
          {2, {map, string, string}},
          {3, string},
          {4, string}]}
;

struct_info('CqlResult') ->
  {struct, [{1, i32},
          {2, {list, {struct, {'cassandra_types', 'CqlRow'}}}},
          {3, i32},
          {4, {struct, {'cassandra_types', 'CqlMetadata'}}}]}
;

struct_info('CqlPreparedResult') ->
  {struct, [{1, i32},
          {2, i32},
          {3, {list, string}},
          {4, {list, string}}]}
;

struct_info('CfSplit') ->
  {struct, [{1, string},
          {2, string},
          {3, i64}]}
;

struct_info('ColumnSlice') ->
  {struct, [{1, string},
          {2, string}]}
;

struct_info('MultiSliceRequest') ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {list, {struct, {'cassandra_types', 'ColumnSlice'}}}},
          {4, bool},
          {5, i32},
          {6, i32}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Column') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, optional, string, 'value', undefined},
          {3, optional, i64, 'timestamp', undefined},
          {4, optional, i32, 'ttl', undefined}]}
;

struct_info_ext('SuperColumn') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'Column'}}}, 'columns', []}]}
;

struct_info_ext('CounterColumn') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, i64, 'value', undefined}]}
;

struct_info_ext('CounterSuperColumn') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'CounterColumn'}}}, 'columns', []}]}
;

struct_info_ext('ColumnOrSuperColumn') ->
  {struct, [{1, optional, {struct, {'cassandra_types', 'Column'}}, 'column', #'Column'{}},
          {2, optional, {struct, {'cassandra_types', 'SuperColumn'}}, 'super_column', #'SuperColumn'{}},
          {3, optional, {struct, {'cassandra_types', 'CounterColumn'}}, 'counter_column', #'CounterColumn'{}},
          {4, optional, {struct, {'cassandra_types', 'CounterSuperColumn'}}, 'counter_super_column', #'CounterSuperColumn'{}}]}
;

struct_info_ext('NotFoundException') ->
  {struct, []}
;

struct_info_ext('InvalidRequestException') ->
  {struct, [{1, required, string, 'why', undefined}]}
;

struct_info_ext('UnavailableException') ->
  {struct, []}
;

struct_info_ext('TimedOutException') ->
  {struct, [{1, optional, i32, 'acknowledged_by', undefined},
          {2, optional, bool, 'acknowledged_by_batchlog', undefined},
          {3, optional, bool, 'paxos_in_progress', undefined}]}
;

struct_info_ext('AuthenticationException') ->
  {struct, [{1, required, string, 'why', undefined}]}
;

struct_info_ext('AuthorizationException') ->
  {struct, [{1, required, string, 'why', undefined}]}
;

struct_info_ext('SchemaDisagreementException') ->
  {struct, []}
;

struct_info_ext('ColumnParent') ->
  {struct, [{3, required, string, 'column_family', undefined},
          {4, optional, string, 'super_column', undefined}]}
;

struct_info_ext('ColumnPath') ->
  {struct, [{3, required, string, 'column_family', undefined},
          {4, optional, string, 'super_column', undefined},
          {5, optional, string, 'column', undefined}]}
;

struct_info_ext('SliceRange') ->
  {struct, [{1, required, string, 'start', undefined},
          {2, required, string, 'finish', undefined},
          {3, required, bool, 'reversed', false},
          {4, required, i32, 'count', 100}]}
;

struct_info_ext('SlicePredicate') ->
  {struct, [{1, optional, {list, string}, 'column_names', []},
          {2, optional, {struct, {'cassandra_types', 'SliceRange'}}, 'slice_range', #'SliceRange'{}}]}
;

struct_info_ext('IndexExpression') ->
  {struct, [{1, required, string, 'column_name', undefined},
          {2, required, i32, 'op', undefined},
          {3, required, string, 'value', undefined}]}
;

struct_info_ext('IndexClause') ->
  {struct, [{1, required, {list, {struct, {'cassandra_types', 'IndexExpression'}}}, 'expressions', []},
          {2, required, string, 'start_key', undefined},
          {3, required, i32, 'count', 100}]}
;

struct_info_ext('KeyRange') ->
  {struct, [{1, optional, string, 'start_key', undefined},
          {2, optional, string, 'end_key', undefined},
          {3, optional, string, 'start_token', undefined},
          {4, optional, string, 'end_token', undefined},
          {6, optional, {list, {struct, {'cassandra_types', 'IndexExpression'}}}, 'row_filter', []},
          {5, required, i32, 'count', 100}]}
;

struct_info_ext('KeySlice') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}}, 'columns', []}]}
;

struct_info_ext('KeyCount') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, i32, 'count', undefined}]}
;

struct_info_ext('Deletion') ->
  {struct, [{1, optional, i64, 'timestamp', undefined},
          {2, optional, string, 'super_column', undefined},
          {3, optional, {struct, {'cassandra_types', 'SlicePredicate'}}, 'predicate', #'SlicePredicate'{}}]}
;

struct_info_ext('Mutation') ->
  {struct, [{1, optional, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}, 'column_or_supercolumn', #'ColumnOrSuperColumn'{}},
          {2, optional, {struct, {'cassandra_types', 'Deletion'}}, 'deletion', #'Deletion'{}}]}
;

struct_info_ext('EndpointDetails') ->
  {struct, [{1, undefined, string, 'host', undefined},
          {2, undefined, string, 'datacenter', undefined},
          {3, optional, string, 'rack', undefined}]}
;

struct_info_ext('CASResult') ->
  {struct, [{1, required, bool, 'success', undefined},
          {2, optional, {list, {struct, {'cassandra_types', 'Column'}}}, 'current_values', []}]}
;

struct_info_ext('TokenRange') ->
  {struct, [{1, required, string, 'start_token', undefined},
          {2, required, string, 'end_token', undefined},
          {3, required, {list, string}, 'endpoints', []},
          {4, optional, {list, string}, 'rpc_endpoints', []},
          {5, optional, {list, {struct, {'cassandra_types', 'EndpointDetails'}}}, 'endpoint_details', []}]}
;

struct_info_ext('AuthenticationRequest') ->
  {struct, [{1, required, {map, string, string}, 'credentials', dict:new()}]}
;

struct_info_ext('ColumnDef') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, string, 'validation_class', undefined},
          {3, optional, i32, 'index_type', undefined},
          {4, optional, string, 'index_name', undefined},
          {5, optional, {map, string, string}, 'index_options', dict:new()}]}
;

struct_info_ext('TriggerDef') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, {map, string, string}, 'options', dict:new()}]}
;

struct_info_ext('CfDef') ->
  {struct, [{1, required, string, 'keyspace', undefined},
          {2, required, string, 'name', undefined},
          {3, optional, string, 'column_type', "Standard"},
          {5, optional, string, 'comparator_type', "BytesType"},
          {6, optional, string, 'subcomparator_type', undefined},
          {8, optional, string, 'comment', undefined},
          {12, optional, double, 'read_repair_chance', undefined},
          {13, optional, {list, {struct, {'cassandra_types', 'ColumnDef'}}}, 'column_metadata', []},
          {14, optional, i32, 'gc_grace_seconds', undefined},
          {15, optional, string, 'default_validation_class', undefined},
          {16, optional, i32, 'id', undefined},
          {17, optional, i32, 'min_compaction_threshold', undefined},
          {18, optional, i32, 'max_compaction_threshold', undefined},
          {26, optional, string, 'key_validation_class', undefined},
          {28, optional, string, 'key_alias', undefined},
          {29, optional, string, 'compaction_strategy', undefined},
          {30, optional, {map, string, string}, 'compaction_strategy_options', dict:new()},
          {32, optional, {map, string, string}, 'compression_options', dict:new()},
          {33, optional, double, 'bloom_filter_fp_chance', undefined},
          {34, optional, string, 'caching', "keys_only"},
          {37, optional, double, 'dclocal_read_repair_chance', 0},
          {39, optional, i32, 'memtable_flush_period_in_ms', undefined},
          {40, optional, i32, 'default_time_to_live', undefined},
          {42, optional, string, 'speculative_retry', "NONE"},
          {43, optional, {list, {struct, {'cassandra_types', 'TriggerDef'}}}, 'triggers', []},
          {44, optional, string, 'cells_per_row_to_cache', "100"},
          {45, optional, i32, 'min_index_interval', undefined},
          {46, optional, i32, 'max_index_interval', undefined},
          {9, optional, double, 'row_cache_size', undefined},
          {11, optional, double, 'key_cache_size', undefined},
          {19, optional, i32, 'row_cache_save_period_in_seconds', undefined},
          {20, optional, i32, 'key_cache_save_period_in_seconds', undefined},
          {21, optional, i32, 'memtable_flush_after_mins', undefined},
          {22, optional, i32, 'memtable_throughput_in_mb', undefined},
          {23, optional, double, 'memtable_operations_in_millions', undefined},
          {24, optional, bool, 'replicate_on_write', undefined},
          {25, optional, double, 'merge_shards_chance', undefined},
          {27, optional, string, 'row_cache_provider', undefined},
          {31, optional, i32, 'row_cache_keys_to_save', undefined},
          {38, optional, bool, 'populate_io_cache_on_flush', undefined},
          {41, optional, i32, 'index_interval', undefined}]}
;

struct_info_ext('KsDef') ->
  {struct, [{1, required, string, 'name', undefined},
          {2, required, string, 'strategy_class', undefined},
          {3, optional, {map, string, string}, 'strategy_options', dict:new()},
          {4, optional, i32, 'replication_factor', undefined},
          {5, required, {list, {struct, {'cassandra_types', 'CfDef'}}}, 'cf_defs', []},
          {6, optional, bool, 'durable_writes', true}]}
;

struct_info_ext('CqlRow') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, {list, {struct, {'cassandra_types', 'Column'}}}, 'columns', []}]}
;

struct_info_ext('CqlMetadata') ->
  {struct, [{1, required, {map, string, string}, 'name_types', dict:new()},
          {2, required, {map, string, string}, 'value_types', dict:new()},
          {3, required, string, 'default_name_type', undefined},
          {4, required, string, 'default_value_type', undefined}]}
;

struct_info_ext('CqlResult') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, optional, {list, {struct, {'cassandra_types', 'CqlRow'}}}, 'rows', []},
          {3, optional, i32, 'num', undefined},
          {4, optional, {struct, {'cassandra_types', 'CqlMetadata'}}, 'schema', #'CqlMetadata'{}}]}
;

struct_info_ext('CqlPreparedResult') ->
  {struct, [{1, required, i32, 'itemId', undefined},
          {2, required, i32, 'count', undefined},
          {3, optional, {list, string}, 'variable_types', []},
          {4, optional, {list, string}, 'variable_names', []}]}
;

struct_info_ext('CfSplit') ->
  {struct, [{1, required, string, 'start_token', undefined},
          {2, required, string, 'end_token', undefined},
          {3, required, i64, 'row_count', undefined}]}
;

struct_info_ext('ColumnSlice') ->
  {struct, [{1, optional, string, 'start', undefined},
          {2, optional, string, 'finish', undefined}]}
;

struct_info_ext('MultiSliceRequest') ->
  {struct, [{1, optional, string, 'key', undefined},
          {2, optional, {struct, {'cassandra_types', 'ColumnParent'}}, 'column_parent', #'ColumnParent'{}},
          {3, optional, {list, {struct, {'cassandra_types', 'ColumnSlice'}}}, 'column_slices', []},
          {4, optional, bool, 'reversed', false},
          {5, optional, i32, 'count', 1000},
          {6, optional, i32, 'consistency_level',   1}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

