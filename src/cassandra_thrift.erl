%%
%% Autogenerated by Thrift Compiler (0.9.2)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(cassandra_thrift).
-behaviour(thrift_service).


-include("cassandra_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% login(This, Auth_request)
function_info('login', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'AuthenticationRequest'}}}]}
;
function_info('login', reply_type) ->
  {struct, []};
function_info('login', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'AuthenticationException'}}},
          {2, {struct, {'cassandra_types', 'AuthorizationException'}}}]}
;
% set_keyspace(This, Keyspace)
function_info('set_keyspace', params_type) ->
  {struct, [{1, string}]}
;
function_info('set_keyspace', reply_type) ->
  {struct, []};
function_info('set_keyspace', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% get(This, Key, Column_path, Consistency_level)
function_info('get', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnPath'}}},
          {3, i32}]}
;
function_info('get', reply_type) ->
  {struct, {'cassandra_types', 'ColumnOrSuperColumn'}};
function_info('get', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'NotFoundException'}}},
          {3, {struct, {'cassandra_types', 'UnavailableException'}}},
          {4, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% get_slice(This, Key, Column_parent, Predicate, Consistency_level)
function_info('get_slice', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {struct, {'cassandra_types', 'SlicePredicate'}}},
          {4, i32}]}
;
function_info('get_slice', reply_type) ->
  {list, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}};
function_info('get_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% get_count(This, Key, Column_parent, Predicate, Consistency_level)
function_info('get_count', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {struct, {'cassandra_types', 'SlicePredicate'}}},
          {4, i32}]}
;
function_info('get_count', reply_type) ->
  i32;
function_info('get_count', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% multiget_slice(This, Keys, Column_parent, Predicate, Consistency_level)
function_info('multiget_slice', params_type) ->
  {struct, [{1, {list, string}},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {struct, {'cassandra_types', 'SlicePredicate'}}},
          {4, i32}]}
;
function_info('multiget_slice', reply_type) ->
  {map, string, {list, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}}};
function_info('multiget_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% multiget_count(This, Keys, Column_parent, Predicate, Consistency_level)
function_info('multiget_count', params_type) ->
  {struct, [{1, {list, string}},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {struct, {'cassandra_types', 'SlicePredicate'}}},
          {4, i32}]}
;
function_info('multiget_count', reply_type) ->
  {map, string, i32};
function_info('multiget_count', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% get_range_slices(This, Column_parent, Predicate, Range, Consistency_level)
function_info('get_range_slices', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'ColumnParent'}}},
          {2, {struct, {'cassandra_types', 'SlicePredicate'}}},
          {3, {struct, {'cassandra_types', 'KeyRange'}}},
          {4, i32}]}
;
function_info('get_range_slices', reply_type) ->
  {list, {struct, {'cassandra_types', 'KeySlice'}}};
function_info('get_range_slices', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% get_paged_slice(This, Column_family, Range, Start_column, Consistency_level)
function_info('get_paged_slice', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'KeyRange'}}},
          {3, string},
          {4, i32}]}
;
function_info('get_paged_slice', reply_type) ->
  {list, {struct, {'cassandra_types', 'KeySlice'}}};
function_info('get_paged_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% get_indexed_slices(This, Column_parent, Index_clause, Column_predicate, Consistency_level)
function_info('get_indexed_slices', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'ColumnParent'}}},
          {2, {struct, {'cassandra_types', 'IndexClause'}}},
          {3, {struct, {'cassandra_types', 'SlicePredicate'}}},
          {4, i32}]}
;
function_info('get_indexed_slices', reply_type) ->
  {list, {struct, {'cassandra_types', 'KeySlice'}}};
function_info('get_indexed_slices', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% insert(This, Key, Column_parent, Column, Consistency_level)
function_info('insert', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {struct, {'cassandra_types', 'Column'}}},
          {4, i32}]}
;
function_info('insert', reply_type) ->
  {struct, []};
function_info('insert', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% add(This, Key, Column_parent, Column, Consistency_level)
function_info('add', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnParent'}}},
          {3, {struct, {'cassandra_types', 'CounterColumn'}}},
          {4, i32}]}
;
function_info('add', reply_type) ->
  {struct, []};
function_info('add', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% cas(This, Key, Column_family, Expected, Updates, Serial_consistency_level, Commit_consistency_level)
function_info('cas', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {list, {struct, {'cassandra_types', 'Column'}}}},
          {4, {list, {struct, {'cassandra_types', 'Column'}}}},
          {5, i32},
          {6, i32}]}
;
function_info('cas', reply_type) ->
  {struct, {'cassandra_types', 'CASResult'}};
function_info('cas', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% remove(This, Key, Column_path, Timestamp, Consistency_level)
function_info('remove', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnPath'}}},
          {3, i64},
          {4, i32}]}
;
function_info('remove', reply_type) ->
  {struct, []};
function_info('remove', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% remove_counter(This, Key, Path, Consistency_level)
function_info('remove_counter', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'cassandra_types', 'ColumnPath'}}},
          {3, i32}]}
;
function_info('remove_counter', reply_type) ->
  {struct, []};
function_info('remove_counter', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% batch_mutate(This, Mutation_map, Consistency_level)
function_info('batch_mutate', params_type) ->
  {struct, [{1, {map, string, {map, string, {list, {struct, {'cassandra_types', 'Mutation'}}}}}},
          {2, i32}]}
;
function_info('batch_mutate', reply_type) ->
  {struct, []};
function_info('batch_mutate', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% atomic_batch_mutate(This, Mutation_map, Consistency_level)
function_info('atomic_batch_mutate', params_type) ->
  {struct, [{1, {map, string, {map, string, {list, {struct, {'cassandra_types', 'Mutation'}}}}}},
          {2, i32}]}
;
function_info('atomic_batch_mutate', reply_type) ->
  {struct, []};
function_info('atomic_batch_mutate', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% truncate(This, Cfname)
function_info('truncate', params_type) ->
  {struct, [{1, string}]}
;
function_info('truncate', reply_type) ->
  {struct, []};
function_info('truncate', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% get_multi_slice(This, Request)
function_info('get_multi_slice', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'MultiSliceRequest'}}}]}
;
function_info('get_multi_slice', reply_type) ->
  {list, {struct, {'cassandra_types', 'ColumnOrSuperColumn'}}};
function_info('get_multi_slice', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}}]}
;
% describe_schema_versions(This)
function_info('describe_schema_versions', params_type) ->
  {struct, []}
;
function_info('describe_schema_versions', reply_type) ->
  {map, string, {list, string}};
function_info('describe_schema_versions', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% describe_keyspaces(This)
function_info('describe_keyspaces', params_type) ->
  {struct, []}
;
function_info('describe_keyspaces', reply_type) ->
  {list, {struct, {'cassandra_types', 'KsDef'}}};
function_info('describe_keyspaces', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% describe_cluster_name(This)
function_info('describe_cluster_name', params_type) ->
  {struct, []}
;
function_info('describe_cluster_name', reply_type) ->
  string;
function_info('describe_cluster_name', exceptions) ->
  {struct, []}
;
% describe_version(This)
function_info('describe_version', params_type) ->
  {struct, []}
;
function_info('describe_version', reply_type) ->
  string;
function_info('describe_version', exceptions) ->
  {struct, []}
;
% describe_ring(This, Keyspace)
function_info('describe_ring', params_type) ->
  {struct, [{1, string}]}
;
function_info('describe_ring', reply_type) ->
  {list, {struct, {'cassandra_types', 'TokenRange'}}};
function_info('describe_ring', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% describe_local_ring(This, Keyspace)
function_info('describe_local_ring', params_type) ->
  {struct, [{1, string}]}
;
function_info('describe_local_ring', reply_type) ->
  {list, {struct, {'cassandra_types', 'TokenRange'}}};
function_info('describe_local_ring', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% describe_token_map(This)
function_info('describe_token_map', params_type) ->
  {struct, []}
;
function_info('describe_token_map', reply_type) ->
  {map, string, string};
function_info('describe_token_map', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% describe_partitioner(This)
function_info('describe_partitioner', params_type) ->
  {struct, []}
;
function_info('describe_partitioner', reply_type) ->
  string;
function_info('describe_partitioner', exceptions) ->
  {struct, []}
;
% describe_snitch(This)
function_info('describe_snitch', params_type) ->
  {struct, []}
;
function_info('describe_snitch', reply_type) ->
  string;
function_info('describe_snitch', exceptions) ->
  {struct, []}
;
% describe_keyspace(This, Keyspace)
function_info('describe_keyspace', params_type) ->
  {struct, [{1, string}]}
;
function_info('describe_keyspace', reply_type) ->
  {struct, {'cassandra_types', 'KsDef'}};
function_info('describe_keyspace', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'NotFoundException'}}},
          {2, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% describe_splits(This, CfName, Start_token, End_token, Keys_per_split)
function_info('describe_splits', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;
function_info('describe_splits', reply_type) ->
  {list, string};
function_info('describe_splits', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% trace_next_query(This)
function_info('trace_next_query', params_type) ->
  {struct, []}
;
function_info('trace_next_query', reply_type) ->
  string;
function_info('trace_next_query', exceptions) ->
  {struct, []}
;
% describe_splits_ex(This, CfName, Start_token, End_token, Keys_per_split)
function_info('describe_splits_ex', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, i32}]}
;
function_info('describe_splits_ex', reply_type) ->
  {list, {struct, {'cassandra_types', 'CfSplit'}}};
function_info('describe_splits_ex', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% system_add_column_family(This, Cf_def)
function_info('system_add_column_family', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'CfDef'}}}]}
;
function_info('system_add_column_family', reply_type) ->
  string;
function_info('system_add_column_family', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% system_drop_column_family(This, Column_family)
function_info('system_drop_column_family', params_type) ->
  {struct, [{1, string}]}
;
function_info('system_drop_column_family', reply_type) ->
  string;
function_info('system_drop_column_family', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% system_add_keyspace(This, Ks_def)
function_info('system_add_keyspace', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'KsDef'}}}]}
;
function_info('system_add_keyspace', reply_type) ->
  string;
function_info('system_add_keyspace', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% system_drop_keyspace(This, Keyspace)
function_info('system_drop_keyspace', params_type) ->
  {struct, [{1, string}]}
;
function_info('system_drop_keyspace', reply_type) ->
  string;
function_info('system_drop_keyspace', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% system_update_keyspace(This, Ks_def)
function_info('system_update_keyspace', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'KsDef'}}}]}
;
function_info('system_update_keyspace', reply_type) ->
  string;
function_info('system_update_keyspace', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% system_update_column_family(This, Cf_def)
function_info('system_update_column_family', params_type) ->
  {struct, [{1, {struct, {'cassandra_types', 'CfDef'}}}]}
;
function_info('system_update_column_family', reply_type) ->
  string;
function_info('system_update_column_family', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% execute_cql_query(This, Query, Compression)
function_info('execute_cql_query', params_type) ->
  {struct, [{1, string},
          {2, i32}]}
;
function_info('execute_cql_query', reply_type) ->
  {struct, {'cassandra_types', 'CqlResult'}};
function_info('execute_cql_query', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}},
          {4, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% execute_cql3_query(This, Query, Compression, Consistency)
function_info('execute_cql3_query', params_type) ->
  {struct, [{1, string},
          {2, i32},
          {3, i32}]}
;
function_info('execute_cql3_query', reply_type) ->
  {struct, {'cassandra_types', 'CqlResult'}};
function_info('execute_cql3_query', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}},
          {4, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% prepare_cql_query(This, Query, Compression)
function_info('prepare_cql_query', params_type) ->
  {struct, [{1, string},
          {2, i32}]}
;
function_info('prepare_cql_query', reply_type) ->
  {struct, {'cassandra_types', 'CqlPreparedResult'}};
function_info('prepare_cql_query', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% prepare_cql3_query(This, Query, Compression)
function_info('prepare_cql3_query', params_type) ->
  {struct, [{1, string},
          {2, i32}]}
;
function_info('prepare_cql3_query', reply_type) ->
  {struct, {'cassandra_types', 'CqlPreparedResult'}};
function_info('prepare_cql3_query', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
% execute_prepared_cql_query(This, ItemId, Values)
function_info('execute_prepared_cql_query', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}}]}
;
function_info('execute_prepared_cql_query', reply_type) ->
  {struct, {'cassandra_types', 'CqlResult'}};
function_info('execute_prepared_cql_query', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}},
          {4, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% execute_prepared_cql3_query(This, ItemId, Values, Consistency)
function_info('execute_prepared_cql3_query', params_type) ->
  {struct, [{1, i32},
          {2, {list, string}},
          {3, i32}]}
;
function_info('execute_prepared_cql3_query', reply_type) ->
  {struct, {'cassandra_types', 'CqlResult'}};
function_info('execute_prepared_cql3_query', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}},
          {2, {struct, {'cassandra_types', 'UnavailableException'}}},
          {3, {struct, {'cassandra_types', 'TimedOutException'}}},
          {4, {struct, {'cassandra_types', 'SchemaDisagreementException'}}}]}
;
% set_cql_version(This, Version)
function_info('set_cql_version', params_type) ->
  {struct, [{1, string}]}
;
function_info('set_cql_version', reply_type) ->
  {struct, []};
function_info('set_cql_version', exceptions) ->
  {struct, [{1, {struct, {'cassandra_types', 'InvalidRequestException'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

